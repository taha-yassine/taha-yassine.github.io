<text-processor id="temperature-figure">
    <div id="container">
        <div id="left">
            <textarea id="input-text" placeholder="Enter some text">The quick brown fox</textarea>
        </div>
        <div id="right">
            <div id="decoding-strategy">
                <h5>Decoding Strategy</h5>
                <button id="greedy-button">Greedy</button>
                <button id="sampling-button">Top-K Sampling</button>
                <!-- <button id="beam-search-button">Beam Search</button> -->
            </div>
            <div id="probability-distribution">
                <div id="header">
                    <h5>Probability Distribution</h5>
                    <button id="refresh-button">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                        </svg>
                    </button>
                </div>
                <div id="bar-chart-container"></div>
            </div>
            <div id="temperature-control">
                <h5>Temperature</h5>
                <div id="temperature-slider-container">
                    <input type="range" id="temperature-slider" min="0.1" max="10" step="0.1" value="1">
                    <span id="temperature-value">1</span>
                </div>
            </div>
        </div>
    </div>
</text-processor>

<script>
    class TextProcessor extends HTMLElement {
        worker: Worker;
        tokens: string[] = [];
        logits: number[] = [];
        probs: number[] = [];
        temperature: number = 1;

        greedyButton: HTMLButtonElement;
        samplingButton: HTMLButtonElement;
        refreshButton: HTMLButtonElement;
        inputElement: HTMLInputElement;
        barChartContainer: HTMLDivElement;
        temperatureSlider: HTMLInputElement;
        temperatureValue: HTMLSpanElement;

        constructor() {
            super();

            this.worker = new Worker(new URL('./worker.js', import.meta.url), {
                type: 'module'
            });
            
            this.inputElement = this.querySelector("#input-text") as HTMLInputElement;

            this.greedyButton = this.querySelector("#greedy-button") as HTMLButtonElement;
            this.samplingButton = this.querySelector("#sampling-button") as HTMLButtonElement;

            this.refreshButton = this.querySelector("#refresh-button") as HTMLButtonElement;

            this.barChartContainer = this.querySelector("#bar-chart-container") as HTMLDivElement;

            this.temperatureSlider = this.querySelector("#temperature-slider") as HTMLInputElement;
            this.temperatureValue = this.querySelector("#temperature-value") as HTMLSpanElement;

            this.refreshButton.addEventListener("click", () => {
                this.worker.postMessage(this.inputElement.value);
            });

            this.greedyButton.addEventListener("click", () => {
                if (this.tokens.length > 0) {
                    this.inputElement.value += this.tokens[0];
                    this.highlightToken(this.barChartContainer.querySelector('.bar-container') as HTMLDivElement);
                    this.worker.postMessage(this.inputElement.value);
                }
            });
            this.samplingButton.addEventListener("click", () => {
                if (this.tokens.length > 0) {
                    const sample = this.multinomialSample(this.probs);
                    this.inputElement.value += this.tokens[sample];
                    this.highlightToken(this.barChartContainer.querySelectorAll('.bar-container')[sample] as HTMLDivElement);
                    this.worker.postMessage(this.inputElement.value);
                }
            });

            this.temperatureSlider.addEventListener("input", () => {
                this.temperature = parseFloat(this.temperatureSlider.value);
                this.temperatureValue.textContent = this.temperature.toString();
                
                this.updateBarChart();
            });

            // Handle worker response
            this.worker.onmessage = (e) => {
                switch (e.data.status) {
                    case 'downloading':
                        console.log('Downloading model...');
                        break;
                    case 'ready':
                        console.log('Model is ready');
                        break;
                    case 'update':
                        this.tokens = e.data.tokens;
                        this.logits = e.data.logits;
                        
                        this.updateBarChart();
                }
            };
        }

        connectedCallback() {
            this.worker.postMessage(this.inputElement.value);
        }

        // We cheat a bit as the softmax is computed wrt the top K
        // tokens when it should be computed wrt the whole vocab,
        // but it's good enough for this demo
        updateBarChart() {
            // Use log softmax as it's more numerically stable
            this.probs = this.logSoftmax(this.logits, this.temperature).map(prob => Math.exp(prob));

            this.barChartContainer.innerHTML = this.tokens.map((token, index) => {
                return `
                    <div class="bar-container">
                        <span class="token-label" data-token="${token}">${token.replace(/[^\S\r\n]/g,'‚ê£').replace(/\n/g, '\\n')}</span>
                        <div class="bar" style="flex: ${this.probs[index]}"></div>
                    </div>
                `;
            }).join('');

            this.barChartContainer.querySelectorAll('.token-label').forEach(label => {
                label.addEventListener('click', this.handleTokenClick.bind(this));
            });
        }

        highlightToken(bar: HTMLDivElement) {
            return bar.style.outline = 'solid #4CAF50';
        }

        handleTokenClick(event: MouseEvent) {
            const clickedToken = (event.target as HTMLElement).getAttribute('data-token');
            if (clickedToken) {
                this.inputElement.value += clickedToken;
                this.worker.postMessage(this.inputElement.value);
            }
        }

        // Stable implementation of log_softmax
        // See https://github.com/scipy/scipy/blob/v1.13.1/scipy/special/_logsumexp.py#L237-L307
        logSoftmax(logits: number[], temperature: number) {
            const scaledLogits = logits.map(logit => logit / temperature);
            const maxVal = Math.max(...scaledLogits);
            const expSum = scaledLogits.reduce((sum, val) => sum + Math.exp(val - maxVal), 0);
            const logExpSum = Math.log(expSum);
            
            return scaledLogits.map(val => val - maxVal - logExpSum);
        }

        multinomialSample(probs: number[]) {
            const r = Math.random();
            let sum = 0;
            for (let i = 0; i < probs.length; i++) {
                sum += probs[i];
                if (r <= sum) {
                    return i;
                }
            }
            return probs.length - 1;
        }
    }

    customElements.define("text-processor", TextProcessor);
</script>

<style>
    #container {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
    }

    #left {
        flex: 1;
    }

    #right {
        flex: 1;
    }

    @media (max-width: 768px) {
        #left {
            flex-basis: 100%;
        }

        #right {
            flex-basis: 100%;
        }
    }

    h5 {
        font-weight: 400;
    }

    #decoding-strategy {
        margin-bottom: 20px;
    }

    #input-text {
        height: 100%;
        width: 100%;
        resize: none;
    }

    #probability-distribution #header {
        display: flex;
        align-items: center;
    }

    #refresh-button {
        background: none;
        border: none;
        padding: 0;
        margin-left: 8px;
        cursor: pointer;
    }

    #refresh-button svg {
        width: 16px;
        height: 16px;
    }

    :global(.bar-container) {
        display: flex;
        align-items: center;
        width: 100%;
        height: 30px;
        gap: 10px;
    }

    :global(.bar) {
        height: 10px;
        background-color: #4CAF50;
        border-radius: 0 5px 5px 0;
    }

    :global(.token-label) {
        font-size: 1rem;
        cursor: pointer;
        width: 120px;
        text-align: center;
    }

    :global(.token-label:hover) {
        text-decoration: underline;
        cursor: pointer;
    }

    #temperature-control {
        margin-top: 20px;
    }

    #temperature-slider-container {
        margin-top: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    #temperature-slider-container input[type="range"] {
        flex-grow: 1;
    }

    #temperature-value {
        font-size: 1rem;
        text-align: center;
        width: 35px;
    }
</style>
